name: Build and Deploy to Cloud Run

on:
  workflow_dispatch:
  push:
    branches: ["main"]

env:
  PROJECT_ID: "${{ vars.PROJECT_ID }}" # TODO: update Google Cloud project id
  GAR_LOCATION: "${{ vars.GAR_LOCATION }}" # TODO: update Artifact Registry location
  SERVICE: "${{ vars.SERVICE }}" # TODO: update Cloud Run service name
  REGION: "${{ vars.REGION }}" # TODO: update Cloud Run service region
  TF_CLOUD_ORGANIZATION: "ydzulynsky"
  TF_WORKSPACE: "Infrustructure"
  CONFIG_DIRECTORY: "/home/runner/work/AeroRadarPublic/AeroRadarPublic/Infrustructure"

jobs:
  deploy:
    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v1"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}"
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}"

      # Uncomment these steps if you need to build and push a Docker image
      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v1"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: "Create .env File"
        working-directory: /home/runner/work/AeroRadarPublic/AeroRadarPublic/Website
        run: |
          touch .env.local
          echo "NEXT_PUBLIC_GOOGLE_MAPS_API_KEY='${{ secrets.GOOGLE_MAPS_API_KEY }}'" > .env.local
          echo "NEXT_PUBLIC_FIREBASE_API_KEY='${{ secrets.FIREBASE_API_KEY }}'" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_APP_ID='${{ secrets.FIREBASE_APP_ID }}'" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN='${{ secrets.FIREBASE_AUTH_DOMAIN }}'" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_DATABASE_URL='${{ secrets.FIREBASE_DATABASE_URL }}'" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID='${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}'" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID='${{ secrets.FIREBASE_PROJECT_ID }}'" >> .env.local
          echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET='${{ secrets.FIREBASE_STORAGE_BUCKET }}'" >> .env.local
          cat .env.local
      - name: Build and Push Container
        working-directory: /home/runner/work/AeroRadarPublic/AeroRadarPublic/Website
        env:
          NEXT_PUBLIC_FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        run: |-
          docker build --platform=linux/amd64 \
            --build-arg NEXT_PUBLIC_FIREBASE_CONFIG="${{ secrets.FIREBASE_CONFIG }}" \
            --build-arg NEXT_PUBLIC_GOOGLE_MAPS_API_KEY="${{ secrets.GOOGLE_MAPS_API_KEY }}" \
            -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"

      - name: "Clear .env File"
        working-directory: /home/runner/work/AeroRadarPublic/AeroRadarPublic/Website
        run: |
          rm .env.local

      - uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: "Install CDKTF"
        working-directory: Infrustructure
        run: |
          npm install -g cdktf-cli
          npm install
          cdktf --version

      - name: "Deploy with CDKTF"
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN }}
          AUTH_TOKEN: ${{ steps.auth.outputs.access_token }}
          IMAGE_URI: "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"
          REGION: "${{ env.REGION }}"
          PROJECT_ID: "${{ env.PROJECT_ID }}"
          NEXT_PUBLIC_FIREBASE_CONFIG: ${{ secrets.FIREBASE_CONFIG }}
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        working-directory: Infrustructure
        shell: bash
        run: |
          cdktf deploy --auto-approve
